#!/bin/sh
# shellcheck disable=SC2059

readonly VERSION="0.0.1"

Help() {
cat <<"HELP"

aws-s3
======

Simple shell script to get the contents of the file on Amazon S3.  


## Usage:

- help:  
  ```
  $ aws-s3 help
  ```

- cat:
  ```
  $ aws-s3 cat s3://your-bucket-1/path/to/file s3://your-bucket-2/path/to/file ...
  ```


When executing this script, please use it on EC2 which has IAM Role allowed access to Amazon S3,  
or set the following environment variable:  

```
$ export AWS_REGION=ap-northeast-1
$ export AWS_ACCESS_KEY_ID=AKIA****************
$ export AWS_SECRET_ACCESS_KEY=****************************************
```


## Note:

This program relies heavily on "AWS Signature Version 4".  

#### References:

  - Signing AWS Requests with Signature Version 4 - Amazon Web Services  
    https://docs.aws.amazon.com/general/latest/gr/sigv4_signing.html  

  - Signature Calculations for the Authorization Header:  
      Transferring Payload in a Single Chunk (AWS Signature Version 4) - Amazon Simple Storage Service  
    https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-header-based-auth.html  

HELP
}

S3Endpoint() {
  if [ "$1" = us-east-1 ]; then
     printf "s3.amazonaws.com"
  else
    printf "s3-$1.amazonaws.com"
  fi
}

Hex() {
  printf "$1" | od -v -A n -t x1 | while read -r LINE; do printf "${LINE}"; done | sed 's/[^[:graph:]]//g'
}

HMAC() {
  printf "$2" | openssl dgst -sha256 -mac HMAC -macopt hexkey:"$1" | sed 's/^.* //'
}

SHA256Hash() {
  printf "$1" | openssl dgst -sha256 | sed 's/^.* //'
}

Cat() {
  for arg in "$@"; do
    # ignore 1st argument
    if [ "${arg}" = cat ]; then
      continue
    fi

    # check S3 path format argument.
    if printf "${arg}" | grep -Eq 's3://[0-9A-Za-z\.\-]+/.+'; then
      BucketPath=$(printf "${arg}" | sed 's|s3://||g')
    else
      Help && exit 1
    fi
    
    # get AWS_REGION AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY
    if [ "${AWS_REGION}" ] && [ "${AWS_ACCESS_KEY_ID}" ] && [ "${AWS_SECRET_ACCESS_KEY}" ]; then
      Region=${AWS_REGION}
      AccessKeyId=${AWS_ACCESS_KEY_ID}
      SecretAccessKey=${AWS_SECRET_ACCESS_KEY}
    else
      if ! curl -fsS --max-time 1 http://169.254.169.254/ >/dev/null 2>&1; then
        printf "[ERROR] Failed to connect \"http://169.254.169.254/\". Set environments.\n"
        Help && exit 1
      fi
      Region=$(curl -fsS "http://169.254.169.254/latest/meta-data/placement/availability-zone" | sed 's/.$//')
      IAMJSON=$(
        curl -fsS "http://169.254.169.254/latest/meta-data/iam/security-credentials/$(
          curl -fsS http://169.254.169.254/latest/meta-data/iam/security-credentials/
        )"
      )
      AccessKeyId=$(     printf "${IAMJSON}" | grep "AccessKeyId"     | sed 's/.*"[^"]\+" : "\([^"]\+\)".*/\1/g')
      SecretAccessKey=$( printf "${IAMJSON}" | grep "SecretAccessKey" | sed 's/.*"[^"]\+" : "\([^"]\+\)".*/\1/g')
      STSToken=$(        printf "${IAMJSON}" | grep "Token"           | sed 's/.*"[^"]\+" : "\([^"]\+\)".*/\1/g')
    fi
    
    # get S3Endpoint from Region
    S3Endpoint=$(S3Endpoint "${Region}")
    
    # for aws signature version 4
    DateYMD=$(date +'%Y%m%d')
    DateISO8601=$(TZ=GMT date +'%Y%m%dT%H%M%SZ')
    HashedPayload=$(printf "" | openssl dgst -sha256 | sed 's/^.* //')
    CanonicalRequest=$(
      # ** blank lines are required **
      printf "GET\n"
      printf "/${BucketPath}\n"
      printf "\n"
      printf "host:${S3Endpoint}\n"
      printf "x-amz-content-sha256:${HashedPayload}\n"
      printf "x-amz-date:${DateISO8601}\n"
      [ "${STSToken}" ] && printf "x-amz-security-token:${STSToken}\n"
      printf "\n"
      printf "host;x-amz-content-sha256;x-amz-date$([ "${STSToken}" ] && printf ";x-amz-security-token")\n"
      printf "${HashedPayload}"
    )
    StringtoSign=$(
      printf "AWS4-HMAC-SHA256\n"
      printf "${DateISO8601}\n"
      printf "${DateYMD}/${Region}/s3/aws4_request\n"
      printf "$(SHA256Hash "${CanonicalRequest}")"
    )
    Signature=$(
      HMAC "$(HMAC "$(HMAC "$(HMAC "$(HMAC "$(Hex "AWS4${SecretAccessKey}")" "${DateYMD}")" "${Region}")" "s3")" "aws4_request")" "${StringtoSign}"
    )
    Authorization=$(
      printf "AWS4-HMAC-SHA256"
      printf " Credential=${AccessKeyId}/${DateYMD}/${Region}/s3/aws4_request,"
      printf " SignedHeaders=host;x-amz-content-sha256;x-amz-date$([ "${STSToken}" ] && printf ";x-amz-security-token"),"
      printf " Signature=${Signature}"
    )
    
    # do get
    if [ "${STSToken}" ]; then
      curl -fLsS \
        -H "Host: ${S3Endpoint}" \
        -H "x-amz-content-sha256: ${HashedPayload}" \
        -H "x-amz-date: ${DateISO8601}" \
        -H "x-amz-security-token: ${STSToken}" \
        -H "Authorization: ${Authorization}" \
        "https://${S3Endpoint}/${BucketPath}"
    else
      curl -fLsS \
        -H "Host: ${S3Endpoint}" \
        -H "x-amz-content-sha256: ${HashedPayload}" \
        -H "x-amz-date: ${DateISO8601}" \
        -H "Authorization: ${Authorization}" \
        "https://${S3Endpoint}/${BucketPath}"
    fi
  done
}

main() {
  # If there is no argument, display Help and exit abnormally.
  if [ "$#" = 0   ]; then
    Help && exit 1
  fi

  # run sub commands
  case $1 in
  cat)
    Cat "$@"
    ;;
  *)
    Help && exit 1
    ;;
  esac
}

main "$@"
