#!/bin/sh
# shellcheck disable=SC1117

# TODO: make more readable.
# TODO: support AssumeRole. ref: https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html

##
# If in non interactive shell ( "$-" not containing "i" ),
# execute script as command.
##
if ! { echo "$-" | grep -q i; }; then
# -- Non Interactive ----------------

# If an error occurs, EXIT abnormally.
set -e

# Global variables
LAWS_VERSION='0.2.0'
LAWS_PROGRAM_NAME="$(basename -- "$0")"

# When EXIT, clean up temporary files.
trap '{
  if [ -f "${tmpFile}" ]; then
    rm -f ${tmpFile}
  fi
  if [ -f "${tmpFileForS3ToS3}" ]; then
    rm -f ${tmpFileForS3ToS3}
  fi
  if [ -f "${tmpFileForStdinToS3}" ]; then
    rm -f ${tmpFileForStdinToS3}
  fi
}' EXIT

##
# Output README
# RequiredFunctionsAndVariables:
#   no
# Arguments:
#   no
# Stdin:
#   no
# Stdout:
#   no
# Stderr:
#   string README
# Return:
#   0 always
##
PrintStderrReadMe() { (
cat <<'README' >/dev/stderr

laws
====

Lightweight shell script for Amazon Web Service Command Line Interface like AWS CLI.

Currently `laws` only supports **Amazon S3**.


## TL;DR

```
curl -sS https://raw.githubusercontent.com/djeeno/laws/master/laws | sh /dev/stdin s3 ls
```


## Install:

```
sudo curl -sS https://raw.githubusercontent.com/djeeno/laws/master/laws -o /usr/local/bin/laws && sudo chmod +x $_
```


## Usage:

When executing this script,
- Please use it on EC2 which has IAM Role allowed access to Amazon S3,
- OR save `~/.aws/config` and `~/.aws/credentials`,
- OR set the following environment variables:

```
export AWS_REGION=ap-northeast-1
export AWS_ACCESS_KEY_ID=AKIA****************
export AWS_SECRET_ACCESS_KEY=****************************************
```

#### `help`
Display help.  

```
laws help
```

#### `s3 ls`
List the contents on Amazon S3.  

```
laws s3 ls [<your-bucket>[<prefix>]]
```

#### `s3 cat`
Get the contents of the file on Amazon S3.  

```
laws s3 cat s3://your-bucket/path/to/file ...
```

#### `s3 cp`
Copy a file.  

```
laws s3 cp s3://your-bucket/path/to/file /path/to/file
laws s3 cp /path/to/file s3://your-bucket/path/to/file
laws s3 cp s3://your-bucket-b/path/to/file s3://your-bucket-a/path/to/file
```

#### completion
Tab Completion.

```
. $(command -v laws)
```

OR  

```
. /path/to/laws
```


## Note:
This program relies heavily on "AWS Signature Version 4".  

#### References:
- Signing AWS Requests with Signature Version 4 - Amazon Web Services  
  https://docs.aws.amazon.com/general/latest/gr/sigv4_signing.html  
- Authenticating Requests: Using Query Parameters (AWS Signature Version 4)
  https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/API/sigv4-query-string-auth.html
- Signature Calculations for the Authorization Header:  
  Transferring Payload in a Single Chunk (AWS Signature Version 4) - Amazon Simple Storage Service  
  https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-header-based-auth.html  
- GET Bucket (List Objects) Version 2  
  https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/API/v2-RESTBucketGET.html  


## TODO
- Support DELETE Method
- Support `--prefix` like awscli


---
README
)}

##
# Output UTC date for log
# RequiredFunctionsAndVariables:
#   no
# Arguments:
#   no
# Stdin:
#   no
# Stdout:
#   string UTC date ISO 8601 format
# Stderr:
#   no
# Return:
#   0 always
##
PrintDateUTC() { (
  TZ=UTC date +%Y%m%dT%H%M%SZ
)}

##
# Output log
# RequiredFunctionsAndVariables:
#   no
# Arguments:
#   $1 log level
#   $2 log message
# Stdin:
#   no
# Stdout:
#   no
# Stderr:
#   string log message
# Return:
#   0 always
##
PrintStderrLog() { (
  # vars
  logLevel="${1:?"$(PrintDateUTC) [FATAL] PrintStderrLog(): requires \"logLevel\" as \$1"}"
  logMessages="${2:?"$(PrintDateUTC) [FATAL] PrintStderrLog(): requires \"logMessages\" as \$2"}"
  
  # check logLevel
  case "${logLevel}" in
    f|F) tag='[FATAL]' ;;
    e|E) tag='[ERROR]' ;;
    w|W) tag='[WARN] ' ;;
    d|D) tag='[DEBUG]' ;;
      *) tag='[INFO] ' ;;
  esac

  # output log message to stderr
  printf '%s\n' "${logMessages}" | awk '{print "'"$(PrintDateUTC) ${LAWS_PROGRAM_NAME}[$$]: ${tag}"' "$0}' >/dev/stderr
)}

##
# Check containing multi bytes character
# RequiredFunctionsAndVariables:
#   no
# Arguments:
#   $1 string to be checked containing multi bytes characters
# Stdin:
#   no
# Stdout:
#   no
# Stderr:
#   no
# Return:
#   0 $1 contain multi bytes characters
#   1 $1 NOT contain multi bytes characters
##
ContainMultiBytesChar() { (
  echo "$1" | LC_ALL=C LANG=C grep -Evq '^[[:cntrl:][:print:]]*$'
)}

##
# Check containing regex passed
# RequiredFunctionsAndVariables:
#   no
# Arguments:
#   $1 regex pattern
#   $2 string to be checked by pattern
# Stdin:
#   no
# Stdout:
#   no
# Stderr:
#   no
# Return:
#   0 string contain pattern
#   1 string NOT contain pattenr
##
ContainRegex() { (
  echo "$2" | grep -Eq -- "$1"
)}

##
# Check containing "-h" or "--help" or "help"
# RequiredFunctionsAndVariables:
#   no
# Arguments:
#   $* all arguments to be checked by pattern
# Stdin:
#   no
# Stdout:
#   no
# Stderr:
#   no
# Return:
#   0 arguments contain help option
#   1 arguments NOT contain help option
##
ContainHelpOption() { (
  #                  "-h" "--help"           "a -h b" "a --help b"  "help"
  ContainRegex '^[[:blank:]]*\-+h(elp)?|[[:blank:]]+\-+h(elp)?|^[[:blank:]]*help[[:blank:]]*$' "$*"
)}

##
# Check containing "^s3://"
# RequiredFunctionsAndVariables:
#   no
# Arguments:
#   $* all arguments to be checked by pattern
# Stdin:
#   no
# Stdout:
#   no
# Stderr:
#   no
# Return:
#   0 arguments contain S3 scheme
#   1 arguments NOT contain S3 scheme
##
ContainS3Scheme() { (
  ContainRegex '^s3://' "$*"
)}

##
# Check existing dependency commands in PATH
# RequiredFunctionsAndVariables:
#   no
# Arguments:
#   $@ dependent commands
# Stdin:
#   no
# Stdout:
#   no
# Stderr:
#   no
# Return:
#   0 commands found in PATH, dependency OK
#   1 commands NOT found in PATH, dependency NG, EXIT immediately
##
CheckDependency() { (
  for cmd in "$@"; do
    if ! { command -v -- "${cmd}" >/dev/null; }; then
      PrintStderrLog E "CheckDependency(): \"${cmd}\" not found in PATH=\"${PATH}\""
      # If command not found in PATH, it terminates abnormally immediately.
      exit 1
    fi
  done
)}

##
# Parse INI file and Print stdout for eval
# RequiredFunctionsAndVariables:
#   no
# Arguments:
#   $1 ini section. if extract "[foo]" section, pass "foo" as $1
#   $2 ini file path
# Stdin:
#   no
# Stdout:
#   string that parsed ini content as shell vars
# Stderr:
#   no
# Return:
#   0 always
##
ParseINIforEval() { (
  # For the setting in the ini file, output commands which define them as shell variables prefixed "INI_".
  iniSectionPattern="${1:?"$(PrintStderrLog F "ParseINIforEval(): requires \"iniSectionPattern\" as \$1")"}"
  file="${2:?"$(PrintStderrLog F "ParseINIforEval(): requires \"file\" as \$2")"}"
  sed "
    s/[[:blank:]]*\=[[:blank:]]*/=/g
    s/[#;].*$//
    s/[[:blank:]]*$//
    s/^[[:blank:]]*//
    s/^\(.*\)=\([^\"\']*\)$/INI_\1=\"\2\"/
    " "${file}" \
    | sed -n "/^\[${iniSectionPattern}\]/,/\[/{/.*\=.*/p;}"
)}

##
# Convert data ($1) to hexadecimal
# RequiredFunctionsAndVariables:
#   no
# Arguments:
#   $1 string
# Stdin:
#   no
# Stdout:
#   string that being converted to hexadecimal
# Stderr:
#   no
# Return:
#   0 always
##
ConvertHex() { (
  printf '%s' "$1" | od -v -A n -t x1 | tr -Cd '0123456789abcdefABCDEF'
)}

##
# hash (Hash-based Message Authentication Code) string ($2) by hexkey ($1)
# RequiredFunctionsAndVariables:
#   no
# Arguments:
#   $1 hexkey
#   $2 string
# Stdin:
#   no
# Stdout:
#   string that being hashed by Hash-based Message Authentication Code
# Stderr:
#   no
# Return:
#   0 always
##
ConvertHMAC() { (
  printf '%s' "$2" | openssl dgst -sha256 -mac HMAC -macopt hexkey:"$1" | sed 's/^.*[[:blank:]]//'
)}

##
# SHA256 Hash string ($1)
# RequiredFunctionsAndVariables:
#   no
# Arguments:
#   $1 string
# Stdin:
#   no
# Stdout:
#   string that being SHA256 hashed 
# Stderr:
#   no
# Return:
#   0 always
##
ConvertSHA256Hash() { (
  printf '%s' "$1" | openssl dgst -sha256 | sed 's/^.*[[:blank:]]//'
)}

##
# Print string without scheme+slash+slash ( like http:// https:// s3:// ssh:// ... )
# RequiredFunctionsAndVariables:
#   no
# Arguments:
#   $1 URI string
# Stdin:
#   no
# Stdout:
#   string that removed scheme+slash+slash (like "s3://")
# Stderr:
#   no
# Return:
#   0 always
##
PrintSchemeSlashSlashRemoved() { (
  printf '%s' "$1" | sed 's|^[^:]*:*//||'
)}

##
# Print string extracted by pattern
# RequiredFunctionsAndVariables:
#   no
# Arguments:
#   $1 pattern
#   $2 string
# Stdin:
#   no
# Stdout:
#   string that extracted by pattern
# Stderr:
#   no
# Return:
#   0 always
##
PrintExtractedByPattern() { (
  echo "$2" | grep -Eo -- "$1"
)} # not using

##
# extract stdin string by pattern
# RequiredFunctionsAndVariables:
#   no
# Arguments:
#   $1 pattern
# Stdin:
#   string
# Stdout:
#   string that extracted by pattern
# Stderr:
#   no
# Return:
#   0 always
##
ExtractStdinByPattern() { (
  grep -Eo -- "$1" /dev/stdin
)}

##
# Print string extracted XML value
# RequiredFunctionsAndVariables:
#   no
# Arguments:
#   $1 XML tag
#   $2 XML data
# Stdin:
#   no
# Stdout:
#   value that extracted by XML tag
# Stderr:
#   no
# Return:
#   0 always
##
PrintExtractedXMLValue() { (
  echo "$2" | grep -Eo "<$1>.*?</$1>" | sed "s|</*$1>||g"
)}

##
# Print string extracted HTTP host
# RequiredFunctionsAndVariables:
#   no
# Arguments:
#   $1 URI string
# Stdin:
#   no
# Stdout:
#   string that extracted as host
# Stderr:
#   no
# Return:
#   0 always
##
PrintExtractedHTTPHost() { (
  PrintSchemeSlashSlashRemoved "$1" | sed 's|/.*||'
)}

##
# Print string extracted HTTP path
# RequiredFunctionsAndVariables:
#   no
# Arguments:
#   $1 URI string
# Stdin:
#   no
# Stdout:
#   string that extracted as path
# Stderr:
#   no
# Return:
#   0 always
##
PrintExtractedHTTPPath() { (
  PrintSchemeSlashSlashRemoved "$1" | grep '/' | sed 's|^[^/]*/||'
)}

##
# Print string that URI-Encoded
# RequiredFunctionsAndVariables:
#   no
# Arguments:
#   $1 URI string
# Stdin:
#   no
# Stdout:
#   string that URI-encoded
# Stderr:
#   no
# Return:
#   0 success to encode
#   1 when contain multi bytes characters
##
URIEncode() { (
  if { ContainMultiBytesChar "$1"; }; then
    PrintStderrLog E 'containing multi bytes char'
    # If multi-byte characters are included, abnormal termination immediately.
    exit 1
  fi
  LC_ALL=C LANG=C
  # shellcheck disable=SC2059
  printf "$(echo "$1" | sed 's/\(.\)/\1\\n/g')" | while read -r LINE; do
    case "$LINE" in
      [0-9A-Za-z._~-])
        printf '%s' "$LINE"
        ;;
      *)
        printf '%%%02X' "'$LINE"
        ;;
    esac
  done
)}

##
# Print string that URI-Encoded without slash /
# RequiredFunctionsAndVariables:
#   no
# Arguments:
#   $1 URI string
# Stdin:
#   no
# Stdout:
#   string that URI-encoded without slash /
# Stderr:
#   no
# Return:
#   0 success to encode
#   1 when contain multi bytes characters
##
URIEncodeWithoutSlash() { (
  if { ContainMultiBytesChar "$1"; }; then
    PrintStderrLog E 'containing multi bytes char'
    # If multi-byte characters are included, abnormal termination immediately.
    exit 1
  fi
  LC_ALL=C LANG=C
  # shellcheck disable=SC2059
  printf -- "$(echo "$1" | sed 's/\(.\)/\1\\n/g')" | while read -r LINE; do
    case "$LINE" in
      [/0-9A-Za-z._~-])
        printf '%s' "$LINE"
        ;;
      *)
        printf '%%%02X' "'$LINE"
        ;;
    esac
  done
)}

##
# Print "AWS Region" aquired by Environment Variable "AWS_REGION" OR "~/.aws/config" OR "169.254.169.254"
# RequiredFunctionsAndVariables:
#   AWS_REGION (option)
# Arguments:
#   no
# Stdin:
#   no
# Stdout:
#   string AWS Region
# Stderr:
#   no
# Return:
#   0 Print AWS Region
#   1 when failed to get AWS Region
##
PrintAWSRegion() { (
  # 1. try to get region from environment variable: AWS_REGION
  [ -z "${AWS_REGION}" ] || { echo "${AWS_REGION}"; return 0; }

  # 2. try to get region from config file: ~/.aws/config
  if { grep -q "[^#]*${AWS_PROFILE:-default}" ~/.aws/config; }; then
    INI_region=''
    eval "$(ParseINIforEval "\(profile \)*${AWS_PROFILE:-default}" ~/.aws/config)"
    if [ "${INI_region}" ]; then
      echo "${INI_region}"
      return 0
    else
      PrintStderrLog W "PrintAWSRegion(): Failed to parse ~/.aws/config: AWS_PROFILE=${AWS_PROFILE:-default}"
    fi
  fi

  # 3. try to get region from AWS meta-data
  if ! { curl -sS --max-time 1 http://169.254.169.254/latest/meta-data/placement/availability-zone 2>/dev/null | sed 's/.$//'; }; then
    PrintStderrLog E "$(cat <<'ERROR'

PrintAWSRegion(): Not specified AWS Region
Follow the steps below to register AWS region:

1. Save config as: ~/.aws/config

    [default]
    region = ap-northeast-1

 ** OR **

1. Set environment variables:

    $ export AWS_REGION=ap-northeast-1

---
ERROR
    )"
    # If a region is not specified, abnormally terminates immediately.
    exit 1
  fi
)}

##
# Print "AWS API Endpoint" aquired by Service Name AND AWS Region
# If already "AWSAPIEndpoint" defined, return normally without doing anything
# RequiredFunctionsAndVariables:
#   AWSAPIEndpoint (option)
#   AWS_REGION (option)
# Arguments:
#   $1 Service Name
#   $2 AWS Region
# Stdin:
#   no
# Stdout:
#   string AWS API Endpoint
# Stderr:
#   no
# Return:
#   0 print AWS API Endpoint
#   1 when un-supported service
##
PrintAWSAPIEndpoint() { (
  # If already "AWSAPIEndpoint" defined, return normally without doing anything
  [ -z "${AWSAPIEndpoint}" ] || { echo "${AWSAPIEndpoint}"; return 0; }

  # Local variables
  service="${1:?"$(PrintStderrLog F "PrintAWSAPIEndpoint(): requires \"service\" as \$1")"}"
  region="${2:?"$(PrintStderrLog F "PrintAWSAPIEndpoint(): requires \"region\" as \$2")"}"

  # switch by service
  case "${service}" in
    s3)
      if [ "${region}" = us-east-1 ]; then
        echo 's3.amazonaws.com'
      else
        echo "s3-${region}.amazonaws.com"
      fi
      ;;
    *)
      PrintStderrLog E "${service} not support"
      return 1
      ;;
  esac
)}

##
# Set global variables AWSAccessKeyId AND AWSSecretAccessKey
# If already "AWSAccessKeyId" AND "AWSSecretAccessKey" defined, return normally without doing anything
# RequiredFunctionsAndVariables:
#   AWSAccessKeyId (option)
#   AWSSecretAccessKey (option)
#   AWS_ACCESS_KEY_ID (option)
#   AWS_SECRET_ACCESS_KEY (option)
# Arguments:
#   no
# Stdin:
#   no
# Stdout:
#   no
# Stderr:
#   no
# Return:
#   0 set AWSAccessKeyId AND AWSSecretAccessKey
#   1 EXIT immediately when failed to set AWSAccessKeyId AND AWSSecretAccessKey
##
SetAWSAccessKey() {
  # If already "AWSAccessKeyId" AND "AWSSecretAccessKey" defined, return normally without doing anything
  if [ "${AWSAccessKeyId}" ] && [ "${AWSSecretAccessKey}" ]; then
    return 0
  fi

  # 1. try to get credentials from environment variables: AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY
  if [ "${AWS_ACCESS_KEY_ID}" ] && [ "${AWS_SECRET_ACCESS_KEY}" ]; then
    AWSAccessKeyId="${AWS_ACCESS_KEY_ID}" AWSSecretAccessKey="${AWS_SECRET_ACCESS_KEY}"
    # If "AWSAccessKeyId" AND "AWSSecretAccessKey" defined, return normally
    if [ "${AWSAccessKeyId}" ] && [ "${AWSSecretAccessKey}" ]; then
      return 0
    fi
  fi

  # 2. try to get credentials from `~/.aws/config` and `~/.aws/credentials`
  if { grep -q "[^#]*${AWS_PROFILE:-default}" ~/.aws/credentials; }; then
    INI_aws_access_key_id='' INI_aws_secret_access_key=''
    eval "$(ParseINIforEval "\(profile \)*${AWS_PROFILE:-default}" ~/.aws/credentials)"
    AWSAccessKeyId="${INI_aws_access_key_id}" AWSSecretAccessKey="${INI_aws_secret_access_key}"
    # If "AWSAccessKeyId" AND "AWSSecretAccessKey" defined, return normally
    if [ "${AWSAccessKeyId}" ] && [ "${AWSSecretAccessKey}" ]; then
      return 0
    fi
  fi

  # 3. try to get credentials from AWS meta-data Instance Profile
  instanceProfile=$(curl -sS --max-time 1 http://169.254.169.254/latest/meta-data/iam/security-credentials/ 2>/dev/null || true)
  secCredJSON=$(curl -sS --max-time 1 "http://169.254.169.254/latest/meta-data/iam/security-credentials/${instanceProfile}" 2>/dev/null || true)
  AWSAccessKeyId=$(echo "${secCredJSON}" | grep 'AccessKeyId' | sed 's/.*"[^"]*" : "\([^"]*\)".*/\1/g')
  AWSSecretAccessKey=$(echo "${secCredJSON}" | grep 'SecretAccessKey' | sed 's/.*"[^"]*" : "\([^"]*\)".*/\1/g')
  STSToken=$(echo "${secCredJSON}" | grep 'Token' | sed 's/.*"[^"]*" : "\([^"]*\)".*/\1/g')

  # if STSToken is null, regarding as not running on EC2.
  if [ "${AWSAccessKeyId}" ] && [ "${AWSSecretAccessKey}" ] && [ "${STSToken}" ]; then
    return 0
  fi

  # PrintStderrLog and EXIT abnormally immediately
  PrintStderrLog E "$(cat <<'ERROR'

SetAWSAccessKey(): Failed to connect http://169.254.169.254/
Follow the steps below to register your credentials:

1. Save credentials file as: ~/.aws/credentials

    [default]
    aws_access_key_id = AKIA****************
    aws_secret_access_key = ****************************************

 ** OR **

1. Set environment variables:

    $ export AWS_ACCESS_KEY_ID=AKIA****************
    $ export AWS_SECRET_ACCESS_KEY=****************************************

---
ERROR
  )"
  exit 1
}

##
# Print Header for Request to AWS API
# RequiredFunctionsAndVariables:
#   AWSAPIEndpoint (required)
#   #HTTPMethod (required) # Unnecessary?
#   HashedPayload (required)
#   DateISO8601 (required)
#   STSToken (option)
# Arguments:
#   no
# Stdin:
#   no
# Stdout:
#   string HTTP header
# Stderr:
#   no
# Return:
#   0 always
##
PrintHTTPHeader() { (
  printf '%s\n' "host:${AWSAPIEndpoint}"
  #[ "${HTTPMethod}" != PUT ] || printf '%s\n' 'content-type:text/plain' # Unnecessary?
  printf '%s\n' "x-amz-content-sha256:${HashedPayload}"
  printf '%s\n' "x-amz-date:${DateISO8601}"
  [ -z "${STSToken}" ] || printf '%s\n' "x-amz-security-token:${STSToken}"
)}

##
# Print CanonicalHeader of AWS Signature Version 4
#   https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/API/sigv4-query-string-auth.html
# RequiredFunctionsAndVariables:
#   PrintHTTPHeader (depend)
# Arguments:
#   no
# Stdin:
#   no
# Stdout:
#   string sorted HTTP header
# Stderr:
#   no
# Return:
#   0 always
##
PrintCanonicalHeader() { (
  PrintHTTPHeader | sort
)}

##
# Print CanonicalRequest of AWS Signature Version 4
#   https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/API/sigv4-query-string-auth.html
# RequiredFunctionsAndVariables:
#   PrintCanonicalHeader (depend)
#   HTTPMethod (required)
#   RequestPath (required)
#   CanonicalQueryString (required)
#   HashedPayload (required)
# Arguments:
#   no
# Stdin:
#   no
# Stdout:
#   string HTTP request
# Stderr:
#   no
# Return:
#   0 always
##
PrintCanonicalRequest() { (
  printf '%s\n' "${HTTPMethod}"                                                         # GET OR PUT
  printf '%s\n' "${RequestPath}"                                                        # /your-backet OR /your-backet/path/to/object
  printf '%s\n' "${CanonicalQueryString}"                                               # list-type=2&prefix=%2Fpath%2Fto%2Ffile
  printf '%s\n' "$(PrintCanonicalHeader)"                                               # HTTP header host:s3.amazonaws.com\nx-amz-content-sha256:e3b0...b855\n ...
  printf '%s\n' ''                                                                      # this blank line is required
  printf '%s\n' "$(PrintCanonicalHeader | sed 's/:.*/;/g' | tr -d '\n' | sed 's/;$//')" # host;x-amz-content-sha256;x-amz-date; ...
  printf '%s\n' "${HashedPayload}"                                                      # e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
)}

##
# Print StringToSign of AWS Signature Version 4
#   https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/API/sigv4-query-string-auth.html
# RequiredFunctionsAndVariables:
#   PrintAWSRegion (depend)
#   ConvertSHA256Hash (depend)
#   PrintCanonicalRequest (depend)
#   DateISO8601 (required)
#   DateYMD (required)
# Arguments:
#   no
# Stdin:
#   no
# Stdout:
#   string StringToSign
# Stderr:
#   no
# Return:
#   0 always
##
PrintStringtoSign() { (
  printf '%s\n' 'AWS4-HMAC-SHA256'
  printf '%s\n' "${DateISO8601}"
  printf '%s\n' "${DateYMD}/$(PrintAWSRegion)/s3/aws4_request"
  printf '%s\n' "$(ConvertSHA256Hash "$(PrintCanonicalRequest)")"
)}

##
# Print Signature of AWS Signature Version 4
#   https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/API/sigv4-query-string-auth.html
# RequiredFunctionsAndVariables:
#   ConvertHMAC (depend)
#   ConvertHex (depend)
#   PrintAWSRegion (depend)
#   PrintStringtoSign (depend)
#   AWSSecretAccessKey (required)
#   DateYMD (required)
# Arguments:
#   no
# Stdin:
#   no
# Stdout:
#   string Signature
# Stderr:
#   no
# Return:
#   0 always
##
PrintSignature() { (
  ConvertHMAC "$(
    ConvertHMAC "$(
      ConvertHMAC "$(
        ConvertHMAC "$(
          ConvertHMAC "$(
            ConvertHex "AWS4${AWSSecretAccessKey}"
          )" "${DateYMD}"
        )" "$(PrintAWSRegion)"
      )" 's3'
    )" 'aws4_request'
  )" "$(PrintStringtoSign)"
)}

##
# Print Authorization of AWS Signature Version 4
#   https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/API/sigv4-query-string-auth.html
# RequiredFunctionsAndVariables:
#   PrintAWSRegion (depend)
#   PrintCanonicalHeader (depend)
#   PrintSignature (depend)
#   AWSAccessKeyId (required)
#   DateYMD (required)
# Arguments:
#   no
# Stdin:
#   no
# Stdout:
#   string Authorization
# Stderr:
#   no
# Return:
#   0 always
##
PrintAuthorization() { (
  printf '%s' 'AWS4-HMAC-SHA256'
  printf '%s' " Credential=${AWSAccessKeyId}/${DateYMD}/$(PrintAWSRegion)/s3/aws4_request,"
  printf '%s' " SignedHeaders=$(PrintCanonicalHeader | sed 's/:.*/;/g' | tr -d '\n' | sed 's/;$//'),"
  printf '%s' " Signature=$(PrintSignature)"
)}

##
# Call S3 API GET
#   https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/API/sigv4-query-string-auth.html
#   https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/API/v2-RESTBucketGET.html
#   https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/API/RESTObjectGET.html
# RequiredFunctionsAndVariables:
#   PrintCanonicalHeader (depend)
#   PrintAuthorization (depend)
#   HTTPMethod (required)
#   AWSAPIEndpoint (required)
#   RequestPath (required)
#   CanonicalQueryString (required)
# Arguments:
#   no
# Stdin:
#   no
# Stdout:
#   string HTTP response from API
# Stderr:
#   no
# Return:
#   0 success
#   1 failure
##
CallAPIS3GET() { (
  curl -ksS -X "${HTTPMethod}" \
    -H "$(PrintCanonicalHeader)" \
    -H "Authorization: $(PrintAuthorization)" \
    "https://${AWSAPIEndpoint}${RequestPath}$([ -z "${CanonicalQueryString}" ] || echo "?${CanonicalQueryString}")"
)}

##
# Call S3 API PUT
#   https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/API/RESTObjectPUT.html
# RequiredFunctionsAndVariables:
#   PrintHTTPHeader (depend)
#   PrintAuthorization (depend)
#   HTTPMethod (required)
#   SourcePath (required)
#   AWSAPIEndpoint (required)
#   RequestPath (required)
#   CanonicalQueryString (option)
# Arguments:
#   no
# Stdin:
#   no
# Stdout:
#   string HTTP response from API
# Stderr:
#   no
# Return:
#   0 success
#   1 failure
##
CallAPIS3PUT() { (
  curl -ksS -X "${HTTPMethod}" \
    -H "$(PrintHTTPHeader)" \
    -H "Authorization: $(PrintAuthorization)" \
    -T "${SourcePath}" \
    "https://${AWSAPIEndpoint}${RequestPath}$([ -z "${CanonicalQueryString}" ] || echo "?${CanonicalQueryString}")" | tee /dev/stderr
)}

##
# Print S3 List Buckets
#   https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/API/v2-RESTBucketGET.html
# RequiredFunctionsAndVariables:
#   ConvertSHA256Hash (depend)
#   CallAPIS3GET (depend)
# Arguments:
#   "/" or ""
# Stdin:
#   no
# Stdout:
#   string list of buckets
# Stderr:
#   no
# Return:
#   0 success to list
#   1 failure to list
##
PrintS3ListBuckets() { (
  # declare vars for methods
  HTTPMethod='GET'
  HashedPayload="$(ConvertSHA256Hash '')"
  RequestPath='/'
  CanonicalQueryString=''
  response=$(CallAPIS3GET)

  # if err != nil
  if ContainRegex '</Error>' "${response}"; then
    echo "${response}" >/dev/stderr
    return 1
  fi

  # return 0
  echo "${response}" | grep -Eo '[^>]*</Name><CreationDate>[^<]*' | sed 's|\([^>]*\)</Name><CreationDate>\([^<]*\)|\2 s3://\1/|g; s|\.000Z|Z|'
)}

##
# Print S3 List Object
#   https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/API/v2-RESTBucketGET.html
# RequiredFunctionsAndVariables:
#   CallAPIS3GET (depend)
#   MaxKeys (option)
#   ContinuationToken (option)
#   Prefix (option)
# Arguments:
#   $1 S3 Object Path
# Stdin:
#   no
# Stdout:
#   string list of objects
# Stderr:
#   no
# Return:
#   0 success to list
#   1 failure to list
##
PrintS3ListObjects() { (
  # declare vars for methods
  s3Path="$(PrintSchemeSlashSlashRemoved "$1")"

  # declare vars for methods
  HTTPMethod='GET'
  HashedPayload="$(ConvertSHA256Hash '')"
  RequestPath="/$(PrintExtractedHTTPHost "$(PrintSchemeSlashSlashRemoved "${s3Path}")")"
  Prefix=$(URIEncode "$(PrintExtractedHTTPPath "$1")")
  { [ -z "${MaxKeys}" ] || ContainRegex '[^0-9]' "${MaxKeys}"; } && MaxKeys=1000

  # CanonicalQueryString
  CanonicalQueryString="$([ -z "${ContinuationToken}" ] || printf '%s' "continuation-token=${ContinuationToken}&")"
  CanonicalQueryString="${CanonicalQueryString}$([ "${Recursive}" = true ] || printf '%s' "delimiter=%2F&")"
  CanonicalQueryString="${CanonicalQueryString}list-type=2&max-keys=${MaxKeys}"
  CanonicalQueryString="${CanonicalQueryString}$([ -z "${Prefix}" ] || printf '%s' "&prefix=${Prefix}")"

  # run
  response=$(CallAPIS3GET)

  # If exist PermanentRedirect, declare new AWSAPIEndpoint and run PrintS3ListObjects
  if ContainRegex '<Code>PermanentRedirect</Code>' "${response}"; then
    # change AWSAPIEndpoint
    AWSAPIEndpoint=$(PrintExtractedXMLValue 'Endpoint' "${response}")
    PrintStderrLog I "Redirect API Endpoint: ${AWSAPIEndpoint}"
    PrintS3ListObjects "$@"
    return $?
  fi

  # If nothing, print nothing
  if ContainRegex '<KeyCount>0</KeyCount>' "${response}"; then
    return 0
  fi

  # display edited response
  if ContainRegex '</ListBucketResult>' "${response}"; then
    if [ "${Recursive}" = true ]; then
      # output keys
      PrintExtractedXMLValue 'Contents' "${response}" \
        | sed 's|.*>\([^>]*\)</Key><LastModified>\([^<]*\)<.*|\2 s3://'"$(PrintExtractedHTTPHost "$1")"'/\1|g; s|\.000Z|Z|'
    else
      # output prefixes
      PrintExtractedXMLValue 'CommonPrefixes' "${response}" \
        | ExtractStdinByPattern '[^>/]*/</Prefix>' \
        | sed 's|\(.*\)</Prefix>|                 PRE \1|g'
      # output keys
      PrintExtractedByPattern '[^>/]*</Key><LastModified>[^<]*' "${response}" \
        | sed 's|\.000Z|Z|; s|\([^>]*\)</Key><LastModified>\([^<]*\)|\2 \1|g' \
        | grep -v 'Z $' # Somehow some parefix occasionally treated as key, but exclude it from the list.
    fi

    # If exist NextContinuationToken, declare ContinuationToken and run PrintS3ListObjects
    if ContainRegex '<NextContinuationToken>[^<]*' "${response}"; then
      ContinuationToken=$(URIEncode "$(PrintExtractedXMLValue 'NextContinuationToken' "${response}")")
      PrintS3ListObjects "$@"
      return $?
    fi

    return 0
  fi

  echo "${response}" > /dev/stderr
  return 1
)}

##
# Print S3 S3 Get Object contents
# RequiredFunctionsAndVariables:
#   CallAPIS3GET (depend)
# Arguments:
#   $1 S3 Object Path
# Stdin:
#   no
# Stdout:
#   string contents of object
# Stderr:
#   no
# Return:
#   0 success to get
#   1 failure to get
##
PrintS3GetObject() { (
  # vars common
  s3Path="$(PrintSchemeSlashSlashRemoved "${1:?"$(PrintStderrLog F "PrintS3GetObject(): requires \"s3Path\" as \$1")"}")"

  # vars for methods
  HTTPMethod='GET'
  HashedPayload="$(ConvertSHA256Hash '')"
  RequestPath="/$(URIEncodeWithoutSlash "$(PrintSchemeSlashSlashRemoved "${s3Path}")")"
  CanonicalQueryString=''

  # run
  tmpFile=$(mktemp)
  CallAPIS3GET > "${tmpFile}"
  response=$(cat "${tmpFile}")

  # error or not
  if ContainRegex '</Error>' "${response}"; then
    if ContainRegex '<Code>PermanentRedirect</Code>' "${response}"; then
      AWSAPIEndpoint=$(PrintExtractedXMLValue 'Endpoint' "${response}")
      PrintS3GetObject "$@"
      return $?
    fi

    # print error to stderr
    echo "${response}" >/dev/stderr
    return 1
  fi

  # If empty file, Remove.
  [ ! -s "${tmpFile}" ] || cat "${tmpFile}"
)}

##
# laws s3 ls
# RequiredFunctionsAndVariables:
#   PrintS3ListBuckets (depend)
#   PrintS3ListObjects (depend)
# Arguments:
#   $@ S3 Objects Paths
# Stdin:
#   no
# Stdout:
#   string list of objects
# Stderr:
#   no
# Return:
#   0 success to list
#   1 failure to list
##
LawsS3Ls() { (
  # if args contain "-h" or "--help" or "help" or ..., display README
  if ContainHelpOption "$*"; then PrintStderrReadMe; exit 0; fi

  # if no args, list buckets, else list objects by passed bucket
  if [ "$#" = 0 ] || [ "$1" = / ] || [ "$1" = s3:// ]; then
    PrintS3ListBuckets
  else 
    for arg in "$@"; do
      PrintS3ListObjects "$(PrintSchemeSlashSlashRemoved "${arg}")"
    done
  fi
)}

##
# laws s3 cat
# RequiredFunctionsAndVariables:
#   PrintS3GetObject (depend)
# Arguments:
#   $@ S3 Objects Paths
# Stdin:
#   no
# Stdout:
#   contents of objects
# Stderr:
#   no
# Return:
#   0 success to list
#   1 failure to list
##
LawsS3Cat() { (
  # if 0 arg OR args contain "-h" or "--help" or "help" or ..., display README
  if [ "$#" = 0 ] || ContainHelpOption "$*"; then PrintStderrReadMe; exit 0; fi

  # loop by the number of arguments.
  for arg in "$@"; do
    PrintS3GetObject "$(PrintSchemeSlashSlashRemoved "${arg}")"
  done
)}

##
# laws s3 cp
# RequiredFunctionsAndVariables:
#   LawsS3Ls (depend)
#   PrintS3ListBuckets (depend)
#   PrintS3ListObjects (depend)
#   PrintS3GetObject (depend)
#   CallAPIS3PUT (depend)
# Arguments:
#   $1 source path
#   $2 destination path
# Stdin:
#   no
# Stdout:
#   no
# Stderr:
#   error log
# Return:
#   0 success to update or download
#   1 failure to update or download
##
LawsS3Cp() {
  # if less than 2 args OR args contain "-h" or "--help" or "help" or ..., display README
  if [ "$#" != 2 ] || ContainHelpOption "$*"; then PrintStderrReadMe; exit 0; fi

  # vars common
  SourcePath="${1:?"$(PrintStderrLog F "LawsS3Cp(): requires \"SourcePath\" as \$1")"}"
  destinationPath="${2:?"$(PrintStderrLog F "LawsS3Cp(): requires \"destinationPath\" as \$2")"}"

  # stdin
  if [ "${SourcePath}" = - ]; then
    tmpFileForStdinToS3=$(mktemp)
    cat /dev/stdin > "${tmpFileForStdinToS3}"
    SourcePath="${tmpFileForStdinToS3}"
  fi

  # stdout
  if [ "${destinationPath}" = - ]; then
    destinationPath='/dev/stdout'
  fi

  # copy local to s3 (PUT)
  if [ -e "${SourcePath}" ] && { echo "${destinationPath}" | grep -q '^s3://'; }; then

    # vars for cURL
    HTTPMethod='PUT'
    HashedPayload="$(openssl dgst -sha256 "${SourcePath}" | sed 's/^.*[[:blank:]]//')"
    RequestPath="/$(URIEncodeWithoutSlash "$(PrintSchemeSlashSlashRemoved "${destinationPath}")")"
    CanonicalQueryString=''

    # Call API
    response=$(CallAPIS3PUT)
    printf '%s' "${response}" > /dev/stderr

    # if err != nil
    if ContainRegex '</Error>' "${response}"; then
      return 1
    fi

    return 0

  # copy s3 to s3 (GET and PUT)
  elif { echo "${SourcePath} ${destinationPath}" | grep -q '^s3://.* s3://'; }; then
    # GET
    tmpFileForS3ToS3=$(mktemp)
    LawsS3Cat "${SourcePath}" > "${tmpFileForS3ToS3}"

    # PUT
    #PrintStderrLog D "upload ${SourcePath} to ${destinationPath}"
    response=$(LawsS3Cp "${tmpFileForS3ToS3}" "${destinationPath}" 2>&1)
    printf '%s' "${response}" > /dev/stderr

    # If the tmp file can be uploaded, output the appropriate log.
    if ContainRegex '</Error>' "${response}"; then
      return 1
    fi

    return 0

  # copy s3 to local (GET)
  elif { echo "${SourcePath}" | grep -q '^s3://'; }; then

    if [ -d "${destinationPath}" ]; then
      #PrintStderrLog D "download ${SourcePath} to ${destinationPath}/$(basename -- "${SourcePath}")"
      LawsS3Cat "${SourcePath}" > "${destinationPath}/$(basename -- "${SourcePath}")"
      return $?
    elif [ ! -d "${destinationPath}" ] && [ -d "$(dirname "${destinationPath}")" ]; then
      #PrintStderrLog D "download ${SourcePath} to ${destinationPath}"
      LawsS3Cat "${SourcePath}" > "${destinationPath}"
      return $?
    fi

    PrintStderrLog E "not exist destination parent directory: \"$(dirname "${destinationPath}")\" OR already exist directory: \"${destinationPath}/$(basename -- "${SourcePath}\"")"
    return 1
  fi

  PrintStderrLog E "\"${SourcePath}\" and \"${destinationPath}\" not found or local files."
  return 1
}

##
# laws s3
# RequiredFunctionsAndVariables:
#   LawsS3Ls (depend)
#   LawsS3Cat (depend)
#   LawsS3Cp (depend)
# Arguments:
#   $1 sub command
#   $2~ sub command's arguments
# Stdin:
#   no
# Stdout:
#   output
# Stderr:
#   log
# Return:
#   0 success
#   1 failure
##
LawsS3() {
  # check sub commands
  case "$1" in
    subcommands)
      echo "ls list-recursive cat cp"
      return 0
      ;;
    ls)
      shift
      Recursive='false'
      LawsS3Ls "$@"
      ;;
    list-recursive)
      shift
      Recursive='true'
      LawsS3Ls "$@"
      ;;
    cat)
      shift
      LawsS3Cat "$@"
      ;;
    cp)
      shift
      LawsS3Cp "$@"
      ;;
    *)
      PrintStderrReadMe
      exit 0
      ;;
  esac
}

##
# laws
# RequiredFunctionsAndVariables:
#   LawsS3 (depend)
#   SetAWSAccessKey (depend)
#   LAWS_PROGRAM_NAME (required)
#   LAWS_VERSION (required)
# Arguments:
#   $1 sub command
#   $2 sub command
#   $3~ sub command's arguments
# Stdin:
#   no
# Stdout:
#   output
# Stderr:
#   log
# Return:
#   0 success
#   1 failure
##
main() {
  # check dependency
  CheckDependency '[' cat curl date grep od openssl printf sed tr

  # display version
  if ContainRegex '[[:blank:]]-V|[[:blank:]]-*version' " $*"; then
    echo "${LAWS_PROGRAM_NAME} ${LAWS_VERSION}"
    return 0
  fi

  # declare vars for methods
  DateYMD=$(TZ=UTC date +%Y%m%d)
  DateISO8601=$(TZ=UTC date +%Y%m%dT%H%M%SZ)
  AWSAPIEndpoint=$(PrintAWSAPIEndpoint s3 "$(PrintAWSRegion)")
  SetAWSAccessKey

  # check sub commands
  case "$1" in
    subcommands)
      echo "s3"
      return 0
      ;;
    s3)
      shift
      LawsS3 "$@"
      ;;
    *)
      PrintStderrReadMe
      return 0
      ;;
  esac
}

##
# Execute the main function.
# It is executed first in this script.
#
# $@ ... Pass all the arguments of the laws command.
#
# like:
#   main s3 ls s3://mybucket/path/tp/file
##
main "$@"

# -- Non Interactive ----------------
else
# -- Interactive ----------------


##
# Interactive: laws as bash-completion
# ref: https://blog.cybozu.io/entry/2016/09/26/080000
#
# The following functions are for bash-completion.
# When executing as a command,
# the following functions are not defined nor executed.
#
# shellcheck disable=SC2016,SC2034,SC2039
##
__complete_laws() {
  local cur prev cword
  _get_comp_words_by_ref -n : cur prev cword
  if [ "${cword}" -eq 1 ]; then
    eval 'COMPREPLY=( $(compgen -W "'"$(laws subcommands)"'" -- "${cur}") )'
  elif [ "${cword}" -eq 2 ]; then
    eval 'COMPREPLY=( $(compgen -W "'"$(laws "${prev}" subcommands)"'" -- "${cur}") )'
  elif { echo "${COMP_WORDS[@]}" | grep -Eq "^laws s3 +($(laws s3 subcommands | sed 's/ /|/g'))"; }; then  # Amazon S3
    if [ -z "${__laws_s3_ls_completion_pre_exe_time}" ] || [ $(($(date +%s)-__laws_s3_ls_completion_pre_exe_time)) -gt 30 ]; then
      __laws_s3_ls_completion_pre_exe_time=$(date +%s)
      __laws_s3_ls_completion_pre_exe="$(laws s3 ls | sed 's/^[^[:blank:]]*[[:blank:]]//' | tr '\n' ' ')"
    fi
    eval 'COMPREPLY=( $(compgen -W "${__laws_s3_ls_completion_pre_exe} $(ls -aCdF "${cur}"* 2>/dev/null) -" -- "${cur}") )'
  fi
  # COMP_WORDBREAKS 対応
  # Bash completion for Maven escapes colon - https://stackoverflow.com/questions/2805412/bash-completion-for-maven-escapes-colon/12495727
  COMP_WORDBREAKS=${COMP_WORDBREAKS//:}
  # Bash Command-Line Tab Completion Colon Character - https://stackoverflow.com/questions/25362968/bash-command-line-tab-completion-colon-character
  #__ltrim_colon_completions "$cur"
}
# shellcheck disable=SC2039
[ -z "$(command -v complete)" ] || complete -F __complete_laws laws

# -- Interactive ----------------
fi
