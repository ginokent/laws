#!/bin/sh
# shellcheck disable=SC1117

readonly VERSION="0.0.3"

set -e

Help() {
cat <<"HELP" >/dev/stderr

lw
===

Simple shell script with very little dependency.  
Like a **L**one **W**olf that does not depend on anyone... _(:3」∠)_  


## TL;DR

    curl -sS https://raw.githubusercontent.com/djeeno/lw/master/lw | sh /dev/stdin s3 ls


## Usage:

When executing this script,
  - Please use it on EC2 which has IAM Role allowed access to Amazon S3,
  - or save `~/.aws/config` and `~/.aws/credentials`,
  - or set the following environment variables:

    ```
    $ export AWS_REGION=ap-northeast-1
    $ export AWS_ACCESS_KEY_ID=AKIA****************
    $ export AWS_SECRET_ACCESS_KEY=****************************************
    ```


#### `help`
Display help.  

    $ lw help


#### `s3 list`
List the contents on Amazon S3.  

    $ lw s3 list [<your-bucket>[<prefix>]]
    $ lw s3 ls [<your-bucket>[<prefix>]]


#### `s3 get`
Get the contents of the file on Amazon S3.  

    $ lw s3 get s3://your-bucket/path/to/file
    $ lw s3 cat s3://your-bucket/path/to/file


## Note:
This program relies heavily on "AWS Signature Version 4".  

#### References:
  - Signing AWS Requests with Signature Version 4 - Amazon Web Services  
    https://docs.aws.amazon.com/general/latest/gr/sigv4_signing.html  
  - Authenticating Requests: Using Query Parameters (AWS Signature Version 4)
    https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/API/sigv4-query-string-auth.html
  - Signature Calculations for the Authorization Header:  
    Transferring Payload in a Single Chunk (AWS Signature Version 4) - Amazon Simple Storage Service  
    https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-header-based-auth.html  
  - GET Bucket (List Objects) Version 2  
    https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/API/v2-RESTBucketGET.html  

HELP
}

CheckDependency() {
  for cmd in '[' cat curl date grep od openssl printf sed tr; do
    if ! command -v "${cmd}" >/dev/null; then
      echo "[ERROR] CheckDependency: ${cmd} not found in PATH=${PATH}" && exit 1
    fi
  done
}; CheckDependency

Hex() {
  printf "%s" "$1" \
    | od -v -A n -t x1 \
    | while read -r LINE; do printf "%s" "${LINE}"; done \
    | sed 's/[^[:graph:]]//g'
}

HMAC() {
  printf "%s" "$2" \
    | openssl dgst -sha256 -mac HMAC -macopt hexkey:"$1" \
    | sed 's/^.* //'
}

SHA256Hash() {
  printf "%s" "$1" \
    | openssl dgst -sha256 \
    | sed 's/^.* //'
}

SetIAMAndRegion() {
  # get variables from environment
  if [ -z "${Region}" ] || [ -z "${AccessKeyId}" ] || [ -z "${SecretAccessKey}" ]; then
    if [ "${AWS_REGION}" ] && [ "${AWS_ACCESS_KEY_ID}" ] && [ "${AWS_SECRET_ACCESS_KEY}" ]; then
      # get Region AccessKeyId SecretAccessKey from environment variables
      Region=${AWS_REGION}
      AccessKeyId=${AWS_ACCESS_KEY_ID}
      SecretAccessKey=${AWS_SECRET_ACCESS_KEY}
    fi
  fi
  # get variables from ~/.aws/config and ~/.aws/credentials file
  if [ -z "${Region}" ] || [ -z "${AccessKeyId}" ] || [ -z "${SecretAccessKey}" ]; then
    if [ -r ~/.aws/credentials ]; then
      ini_region="" ini_aws_access_key_id="" ini_aws_secret_access_key=""
      eval "$(
        cat ~/.aws/config ~/.aws/credentials 2>/dev/null \
          | sed "s/[[:space:]]*\=[[:space:]]*/=/g; s/[#;].*$//; s/[[:space:]]*$//; s/^[[:space:]]*//; s/^\(.*\)=\([^\"\']*\)$/ini_\1=\"\2\"/" \
          | sed -n "/^\[\(profile \)*${AWS_PROFILE:=default}\]/,/\[/ {/.*\=.*/p;}"
      )"
      Region="${ini_region}"
      AccessKeyId="${ini_aws_access_key_id}"
      SecretAccessKey="${ini_aws_secret_access_key}"
      if [ -z "${Region}" ] || [ -z "${AccessKeyId}" ] || [ -z "${SecretAccessKey}" ]; then
        echo "[WARN]  Failed to parse ~/.aws/credentials or ~/.aws/config" >/dev/stderr
      fi
    fi
  fi
  # get variables from Instance Profile
  if [ -z "${Region}" ] || [ -z "${AccessKeyId}" ] || [ -z "${SecretAccessKey}" ]; then
    # get Region AccessKeyId SecretAccessKey from IAM Role and Instance Profile
    Region=$(curl -sS --max-time 1 "http://169.254.169.254/latest/meta-data/placement/availability-zone" 2>/dev/null | sed 's/.$//' || true)
    InstanceProfile=$(curl -sS --max-time 1 http://169.254.169.254/latest/meta-data/iam/security-credentials/ 2>/dev/null || true)
    IAMJSON=$(curl -sS --max-time 1 "http://169.254.169.254/latest/meta-data/iam/security-credentials/${InstanceProfile}" 2>/dev/null || true)
    AccessKeyId=$(    echo "${IAMJSON}" | grep "AccessKeyId"     | sed 's/.*"[^"]*" : "\([^"]*\)".*/\1/g')
    SecretAccessKey=$(echo "${IAMJSON}" | grep "SecretAccessKey" | sed 's/.*"[^"]*" : "\([^"]*\)".*/\1/g')
    STSToken=$(       echo "${IAMJSON}" | grep "Token"           | sed 's/.*"[^"]*" : "\([^"]*\)".*/\1/g')

    # if STSToken is null, regarding as not running on EC2.
    if [ -z "${STSToken}" ]; then
      echo "$(
        echo "SetIAMAndRegion: Failed to connect http://169.254.169.254/"
        echo "Follow the steps below to register your credentials:"
        echo ""
        echo "1. Save config as: ~/.aws/config"
        echo ""
        echo "    [default]"
        echo "    region = ap-northeast-1"
        echo ""
        echo "2. Save credentials file as: ~/.aws/credentials"
        echo ""
        echo "    [default]"
        echo "    aws_access_key_id = AKIA****************"
        echo "    aws_secret_access_key = ****************************************"
        echo ""
        echo " ** OR **"
        echo ""
        echo "1. Set environment variables:"
        echo ""
        echo "    $ export AWS_REGION=ap-northeast-1"
        echo "    $ export AWS_ACCESS_KEY_ID=AKIA****************"
        echo "    $ export AWS_SECRET_ACCESS_KEY=****************************************"
        echo " "
      )" | sed 's/^/[ERROR] /' >/dev/stderr && exit 1
    fi
  fi
}

TrimSchemeAndSlashSlash() {
  printf "%s" "$1" | sed 's|^[^:]*://||'
}

ExtractHost() {
  TrimSchemeAndSlashSlash "$1" | sed 's|/.*||'
}

ExtractPath() {
  TrimSchemeAndSlashSlash "$1" | grep '/' | sed 's|^[^/]*/|/|'
}

UriEncodeWithoutSlash() {
  printf "%s" "$1" | sed 's|+|%2B|g; s|=|%3D|g; s|\$|%24|g' # TODO: Perhaps the character `$` may not be handled.
}

UriEncode() {
  UriEncodeWithoutSlash "$1" | sed 's|/|%2F|g'
}

CanonicalHeader() {
  printf "%s\n" "host:${APIEndpoint}"
  printf "%s\n" "x-amz-content-sha256:${HashedPayload}"
  printf "%s\n" "x-amz-date:${DateISO8601}"
  if [ "${STSToken}" ]; then printf "%s\n" "x-amz-security-token:${STSToken}"; fi
}

CanonicalRequest() {
  # ** blank lines are required **
  printf "%s\n" "${HTTPMethod}" # GET
  printf "%s\n" "${BucketPath}" # /your-backet
  printf "%s\n" "${CanonicalQueryString}" # ?list-type=2&prefix=%2Fpath%2Fto%2Ffile
  printf "%s\n" "$(CanonicalHeader)"
  printf "%s\n" ""
  printf "%s\n" "$(CanonicalHeader | sed 's/:.*/;/g' | while read -r LINE; do printf "%s" "${LINE}"; done | sed 's/;$//')"
  printf "%s\n" "${HashedPayload}"
}

SetAWSSignatureV4ForS3Get() {
  # generate AWS Signature Version 4 for Amazon S3 REST API
  HTTPMethod="GET"
  APIEndpoint=$([ "${Region}" = us-east-1 ] && echo "s3.amazonaws.com" || echo "s3-${Region}.amazonaws.com")
  DateYMD=$(date +'%Y%m%d')
  DateISO8601=$(TZ=GMT date +'%Y%m%dT%H%M%SZ')
  HashedPayload=$(SHA256Hash "${Payload}")
  CanonicalRequest=$(CanonicalRequest)
  StringtoSign=$(
    printf "%s\n" "AWS4-HMAC-SHA256"
    printf "%s\n" "${DateISO8601}"
    printf "%s\n" "${DateYMD}/${Region}/s3/aws4_request"
    printf "%s\n" "$(SHA256Hash "${CanonicalRequest}")"
  )
  Signature=$(
    HMAC "$(HMAC "$(HMAC "$(HMAC "$(HMAC "$(Hex "AWS4${SecretAccessKey}")" "${DateYMD}")" "${Region}")" "s3")" "aws4_request")" "${StringtoSign}"
  )
  Authorization=$(
    printf "%s" "AWS4-HMAC-SHA256"
    printf "%s" " Credential=${AccessKeyId}/${DateYMD}/${Region}/s3/aws4_request,"
    printf "%s" " SignedHeaders=$(CanonicalHeader | sed 's/:.*/;/g' | while read -r LINE; do printf "%s" "${LINE}"; done | sed 's/;$//'),"
    printf "%s" " Signature=${Signature}"
  )
}

CallAPIS3Get() {
  # run Amazon S3 REST API
  if [ "${STSToken}" ]; then
    curl -LsS "https://${APIEndpoint}${BucketPath}$(if [ "${CanonicalQueryString}" ]; then printf "%s" "?${CanonicalQueryString}"; fi)" \
      -H "Host: ${APIEndpoint}" \
      -H "x-amz-content-sha256: ${HashedPayload}" \
      -H "x-amz-date: ${DateISO8601}" \
      -H "x-amz-security-token: ${STSToken}" \
      -H "Authorization: ${Authorization}"
  else
    curl -LsS "https://${APIEndpoint}${BucketPath}$(if [ "${CanonicalQueryString}" ]; then printf "%s" "?${CanonicalQueryString}"; fi)" \
      -H "Host: ${APIEndpoint}" \
      -H "x-amz-content-sha256: ${HashedPayload}" \
      -H "x-amz-date: ${DateISO8601}" \
      -H "Authorization: ${Authorization}"
  fi
}

List() {
  # check sub commands
  case $1 in
    "")
      # If there is no argument, list the buckets.
      SetIAMAndRegion
      BucketPath="/"
      CanonicalQueryString=""
      Payload=""
      SetAWSSignatureV4ForS3Get
      APIResponse=$(CallAPIS3Get)
      if echo "${APIResponse}" | grep -q "<Error>"; then
        echo "${APIResponse}" && exit 1
      else
        echo "${APIResponse}" | grep -Eo "[^>]*</Name><CreationDate>[^<]*" | sed 's|\([^>]*\)</Name><CreationDate>\([^<]*\)|\2 \1|g;'
      fi
      ;;
    *)
      # If there is an argument, list the objects.
      SetIAMAndRegion
      BucketPath="/$(ExtractHost "$1")"
      CanonicalQueryString="list-type=2"
      if [ "${NextContinuationToken}" ]; then
        CanonicalQueryString="continuation-token=${NextContinuationToken}&${CanonicalQueryString}"
      fi
      Prefix=$(UriEncode "$(ExtractPath "$1" | sed 's|^/||')")
      if [ "${Prefix}" ]; then
        CanonicalQueryString="${CanonicalQueryString}&prefix=${Prefix}"
      fi
      Payload=""
      SetAWSSignatureV4ForS3Get
      APIResponse=$(CallAPIS3Get)
      if echo "${APIResponse}" | grep -q "<Error>"; then
        echo "${APIResponse}" && exit 1
      else
        echo "${APIResponse}" | grep -Eo "[^>]*</Key><LastModified>[^<]*" | sed 's|\([^>]*\)</Key><LastModified>\([^<]*\)|\2 \1|g;'
        if echo "${APIResponse}" | grep -Eq "<NextContinuationToken>[^<]*"; then
          NextContinuationToken=$(UriEncode "$(echo "${APIResponse}" | grep -Eo "<NextContinuationToken>[^<]*" | sed 's|.*>||g')")
          List "$@"
        fi
      fi
      ;;
  esac
}

Get() {
  [ "$#" = 0 ] && Help && exit 1
  SetIAMAndRegion
  BucketPath="/$(UriEncodeWithoutSlash "$(TrimSchemeAndSlashSlash "$1")")"
  CanonicalQueryString=""
  Payload=""
  SetAWSSignatureV4ForS3Get
  CallAPIS3Get
}

S3() {
  # check arguments num
  [ "$#" = 0 ] && Help && exit 1
  # check sub commands
  case $1 in
    list|ls)
      shift && List "$@"
      ;;
    get|cat)
      shift && Get "$@"
      ;;
    *)
      Help && exit 1
      ;;
  esac
}

main() {
  # check arguments num
  [ "$#" = 0 ] && Help && exit 1
  # check sub commands
  case $1 in
    s3)
      shift && S3 "$@"
      ;;
    *)
      Help && exit 1
      ;;
  esac
}

main "$@"
