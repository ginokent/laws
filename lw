#!/bin/sh

readonly VERSION="0.0.1"

Help() {
cat <<"HELP" >/dev/stderr

lw
===

Simple shell script with very little dependency.  
Like a **L**one **W**olf that does not depend on anyone... _(:3」∠)_  


## Usage:

When executing this script,
  - please use it on EC2 which has IAM Role allowed access to Amazon S3,
  - or set `region`, `aws_access_key_id`, `aws_secret_access_key` in `~/.aws/credentials` and `~/.aws/config` and set environment variable `AWS_PROFILE`,
  - or set the following environment variables:

    ```
    $ export AWS_REGION=ap-northeast-1
    $ export AWS_ACCESS_KEY_ID=AKIA****************
    $ export AWS_SECRET_ACCESS_KEY=****************************************
    ```


#### `help`
Display help.  

    $ lw help


#### `s3 list`
list the contents on Amazon S3.  

    $ lw s3 list [<your-bucket>[<prefix>]]
    $ lw s3 ls [<your-bucket>[<prefix>]]


#### `s3 get`
get the contents of the file on Amazon S3.  

    $ lw s3 get s3://your-bucket/path/to/file
    $ lw s3 cat s3://your-bucket/path/to/file


## Note:
This program relies heavily on "AWS Signature Version 4".  

#### References:
  - Signing AWS Requests with Signature Version 4 - Amazon Web Services  
    https://docs.aws.amazon.com/general/latest/gr/sigv4_signing.html  
  - Authenticating Requests: Using Query Parameters (AWS Signature Version 4)
    https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/API/sigv4-query-string-auth.html
  - Signature Calculations for the Authorization Header:  
    Transferring Payload in a Single Chunk (AWS Signature Version 4) - Amazon Simple Storage Service  
    https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-header-based-auth.html  
  - GET Bucket (List Objects) Version 2  
    https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/API/v2-RESTBucketGET.html  

HELP
}

Hex() {
  printf "%s" "$1" | od -v -A n -t x1 | while read -r LINE; do printf "%s" "${LINE}"; done | sed 's/[^[:graph:]]//g'
}

HMAC() {
  printf "%s" "$2" | openssl dgst -sha256 -mac HMAC -macopt hexkey:"$1" | sed 's/^.* //'
}

SHA256Hash() {
  printf "%s" "$1" | openssl dgst -sha256 | sed 's/^.* //'
}

SetIAMVariables() {
  # get variables from environment
  if ! ([ "${Region}" ] && [ "${AccessKeyId}" ] && [ "${SecretAccessKey}" ]); then
    if [ "${AWS_REGION}" ] && [ "${AWS_ACCESS_KEY_ID}" ] && [ "${AWS_SECRET_ACCESS_KEY}" ]; then
      # get Region AccessKeyId SecretAccessKey from environment variables
      Region=${AWS_REGION}
      AccessKeyId=${AWS_ACCESS_KEY_ID}
      SecretAccessKey=${AWS_SECRET_ACCESS_KEY}
    fi
  fi
  # get variables from ~/.aws/config and ~/.aws/credentials file
  if ! ([ "${Region}" ] && [ "${AccessKeyId}" ] && [ "${SecretAccessKey}" ]); then
    if [ -r ~/.aws/credentials ]; then
      eval $(
        cat ~/.aws/config ~/.aws/credentials 2>/dev/null \
          | sed "s/[[:space:]]*\=[[:space:]]*/=/g; s/[#;].*$//; s/[[:space:]]*$//; s/^[[:space:]]*//; s/^\(.*\)=\([^\"\']*\)$/\1=\"\2\"/" \
          | sed -n "/^\[\(profile \)*${AWS_PROFILE:=default}\]/,/^[[:space:]]*\[/{/^[^;].*\=.*/p;}"
      )
      Region="${region}"
      AccessKeyId="${aws_access_key_id}"
      SecretAccessKey="${aws_secret_access_key}"
      if ! ([ "${Region}" ] && [ "${AccessKeyId}" ] && [ "${SecretAccessKey}" ]); then
        echo "[WARN] failed to parse ~/.aws/credentials or ~/.aws/config" >/dev/stderr
      fi
    fi
  fi
  # get variables from Instance Profile
  if ! ([ "${Region}" ] && [ "${AccessKeyId}" ] && [ "${SecretAccessKey}" ]); then
    # get Region AccessKeyId SecretAccessKey from IAM Role and Instance Profile
    Region=$(curl -fsS --max-time 1 "http://169.254.169.254/latest/meta-data/placement/availability-zone" 2>/dev/null | sed 's/.$//')
    IAMJSON=$(curl -fsS --max-time 1 "http://169.254.169.254/latest/meta-data/iam/security-credentials/$(
      curl -fsS --max-time 1 http://169.254.169.254/latest/meta-data/iam/security-credentials/ 2>/dev/null)" 2>/dev/null)
    AccessKeyId=$(     echo "${IAMJSON}" | grep "AccessKeyId"     | sed 's/.*"[^"]*" : "\([^"]*\)".*/\1/g')
    SecretAccessKey=$( echo "${IAMJSON}" | grep "SecretAccessKey" | sed 's/.*"[^"]*" : "\([^"]*\)".*/\1/g')
    STSToken=$(        echo "${IAMJSON}" | grep "Token"           | sed 's/.*"[^"]*" : "\([^"]*\)".*/\1/g')

    # if STSToken is null, regarding as not running on EC2.
    if [ -z "${STSToken}" ]; then
      echo "$(
        echo "Failed to connect http://169.254.169.254/"
        echo "Set environment variables:"
        echo "    $ export AWS_REGION=ap-northeast-1"
        echo "    $ export AWS_ACCESS_KEY_ID=AKIA****************"
        echo "    $ export AWS_SECRET_ACCESS_KEY=****************************************"
      )" | sed 's/^/[ERROR] /' >/dev/stderr
      exit 1
    fi
  fi
}

GenerateAWSSignatureV4() {
  # generate AWS Signature Version 4 for Amazon S3 REST API
  APIEndpoint=$([ "${Region}" = us-east-1 ] && echo "s3.amazonaws.com" || echo "s3-${Region}.amazonaws.com")
  DateYMD=$(date +'%Y%m%d')
  DateISO8601=$(TZ=GMT date +'%Y%m%dT%H%M%SZ')
  HashedPayload=$(printf "%s" "${Payload}" | openssl dgst -sha256 | sed 's/^.* //')
  CanonicalRequest=$(
    # ** blank lines are required **
    printf "%s\n" "${HttpMethod}"
    printf "%s\n" "/${BucketPath}"
    printf "%s\n" "${CanonicalQueryString}"
    printf "%s\n" "host:${APIEndpoint}"
    printf "%s\n" "x-amz-content-sha256:${HashedPayload}"
    printf "%s\n" "x-amz-date:${DateISO8601}"
    [ "${STSToken}" ] && printf "%s\n" "x-amz-security-token:${STSToken}"
    printf "%s\n" ""
    printf "%s\n" "host;x-amz-content-sha256;x-amz-date$([ "${STSToken}" ] && printf "%s" ";x-amz-security-token")"
    printf "%s\n" "${HashedPayload}"
  )
  StringtoSign=$(
    printf "%s\n" "AWS4-HMAC-SHA256"
    printf "%s\n" "${DateISO8601}"
    printf "%s\n" "${DateYMD}/${Region}/s3/aws4_request"
    printf "%s\n" "$(SHA256Hash "${CanonicalRequest}")"
  )
  Signature=$(
    HMAC "$(HMAC "$(HMAC "$(HMAC "$(HMAC "$(Hex "AWS4${SecretAccessKey}")" "${DateYMD}")" "${Region}")" "s3")" "aws4_request")" "${StringtoSign}"
  )
  Authorization=$(
    printf "%s" "AWS4-HMAC-SHA256"
    printf "%s" " Credential=${AccessKeyId}/${DateYMD}/${Region}/s3/aws4_request,"
    printf "%s" " SignedHeaders=host;x-amz-content-sha256;x-amz-date$([ "${STSToken}" ] && printf "%s" ";x-amz-security-token"),"
    printf "%s" " Signature=${Signature}"
  )
}

RunAPI() {
  # run Amazon S3 REST API
  if [ "${STSToken}" ]; then
    curl -LsS "https://${APIEndpoint}/${BucketPath}$([ "${CanonicalQueryString}" ] && printf "%s" "?${CanonicalQueryString}")" \
      -H "Host: ${APIEndpoint}" \
      -H "x-amz-content-sha256: ${HashedPayload}" \
      -H "x-amz-date: ${DateISO8601}" \
      -H "x-amz-security-token: ${STSToken}" \
      -H "Authorization: ${Authorization}"
  else
    curl -LsS "https://${APIEndpoint}/${BucketPath}$([ "${CanonicalQueryString}" ] && printf "%s" "?${CanonicalQueryString}")" \
      -H "Host: ${APIEndpoint}" \
      -H "x-amz-content-sha256: ${HashedPayload}" \
      -H "x-amz-date: ${DateISO8601}" \
      -H "Authorization: ${Authorization}"
  fi
}

Get() {
  [ "$#" = 0 ] && Help && exit 1
  APIEndpoint=$([ "${Region}" = us-east-1 ] && echo "s3.amazonaws.com" || echo "s3-${Region}.amazonaws.com")
  HttpMethod="GET" Payload=""
  BucketPath="$(echo "$1" | sed 's|s3://||')"
  CanonicalQueryString=""
  SetIAMVariables
  GenerateAWSSignatureV4
  RunAPI
}

List() {
  # check sub commands
  case $1 in
    "")
      # If there is no argument, list the buckets.
      APIEndpoint=$([ "${Region}" = us-east-1 ] && echo "s3.amazonaws.com" || echo "s3-${Region}.amazonaws.com")
      HttpMethod="GET" Payload=""
      BucketPath="" CanonicalQueryString=""
      SetIAMVariables
      GenerateAWSSignatureV4
      Response=$(RunAPI)
      if echo "${Response}" | grep -q "<Error>.*</Error>"; then
        echo "${Response}" && exit 1
      else
        echo "${Response}" | grep -Eo "[^<>]*</Name><CreationDate>[^<>]*" | sed 's|\([^<>]*\)</Name><CreationDate>\([^<>]*\)|\2 \1|g;'
      fi
      ;;
    *)
      # If there is an argument, list the objects.
      APIEndpoint=$([ "${Region}" = us-east-1 ] && echo "s3.amazonaws.com" || echo "s3-${Region}.amazonaws.com")
      HttpMethod="GET" Payload=""
      BucketPath=$(echo "$1" | sed 's|s3://||' | sed 's|\([^/]*\)/\(.*\)|\1|' )
      Prefix=$(echo "$1" | sed 's|s3://||' | grep '/' | sed 's|\([^/]*\)/\(.*\)|\2|; s|/|%2F|g')
      CanonicalQueryString="list-type=2$([ "${Prefix}" ] && echo "&prefix=${Prefix}")"
      SetIAMVariables
      GenerateAWSSignatureV4
      Response=$(RunAPI)
      if echo "${Response}" | grep -q "<Error>.*</Error>"; then
        echo "${Response}" && exit 1
      else
        echo "${Response}" | grep -Eo "[^>]*</Key><LastModified>[^<]*" | sed 's|\([^>]*\)</Key><LastModified>\([^<]*\)|\2 \1|g;'
      fi
      ;;
  esac
}

S3() {
  # check arguments num
  [ "$#" = 0 ] && Help && exit 1
  # check sub commands
  case $1 in
    get|cat)
      shift && Get "$@"
      ;;
    list|ls)
      shift && List "$@"
      ;;
    *)
      Help && exit 1
      ;;
  esac
}

main() {
  # check arguments num
  [ "$#" = 0 ] && Help && exit 1
  # check sub commands
  case $1 in
    s3)
      shift && S3 "$@"
      ;;
    *)
      Help && exit 1
      ;;
  esac
}

main "$@"
